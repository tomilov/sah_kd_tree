#include <codegen/vulkan_utils.hpp>
#include <format/vulkan.hpp>
#include <utils/assert.hpp>

#include <../SPIRV-Reflect/spirv_reflect.h>
#include <spirv/unified1/spirv.h>
#include <vulkan/vulkan.hpp>

#include <iterator>
#include <unordered_map>
#include <unordered_set>

#include <cstdint>

namespace codegen::vulkan
{

namespace
{

vk::DeviceSize formatStencilBitSize(vk::Format format)
{
    switch (format) {
    {% for format in formats %}
    {% for component in format.components %}
    {% if component.component_type == 'S' %}
    case {{ format.format_cpp_name }}:  // {{ format.format_name }}
        return {{ component.bitsize }};
    {% endif %}
    {% endfor %}
    {% endfor %}
    default:
        INVARIANT(false, "Stencil size is not known for format '{}'", format);
    }
}

vk::DeviceSize formatDepthBitSize(vk::Format format)
{
    switch (format) {
    {% for format in formats %}
    {% for component in format.components %}
    {% if component.component_type == 'D' %}
    case {{ format.format_cpp_name }}:  // {{ format.format_name }}
        return {{ component.bitsize }};
    {% endif %}
    {% endfor %}
    {% endfor %}
    default:
        INVARIANT(false, "Depth size is not known for format '{}'", format);
    }
}

uint32_t getPlaneIndex(vk::ImageAspectFlagBits imageAspect)
{
    switch (imageAspect) {
    case vk::ImageAspectFlagBits::ePlane0:
        return 0;
    case vk::ImageAspectFlagBits::ePlane1:
        return 1;
    case vk::ImageAspectFlagBits::ePlane2:
        return 2;
    default:
        INVARIANT(false, "Plane index for image apsect '{}' is not known", imageAspect);
    }
}

}  // namespace

const std::unordered_map<vk::Format, Format> kFormats = {
    {% for format in formats %}
    {
        {{ format.format_cpp_name }},  // {{ format.format_name }}
        Format{
            .compatibilityClass = FormatCompatibilityClass::e{{ format.compatibility_cpp_class }},
            .components = {
                {% for component in format.components %}
                {
                    .componentType = ComponentType::e{{ component.component_type }},
                    .numericFormat = NumericFormat::e{{ component.numeric_cpp_format }},
                    {% if component.bitsize != 'compressed' %}
                    .bitsize = {{ component.bitsize }},
                    {% else %}
                    .bitsize = 0,  // compressed: e{{ format.compression_type }}
                    {% endif %}
                    {% if format.planes %}
                    .planeIndex = {{ component.plane_index }},
                    {% endif %}
                },
                {% endfor %}
            },
            {% if format.spirv_image_format %}
            .spvImageFormat = SpvImageFormat{{ format.spirv_image_format }},
            {% endif %}
            {% if format.block_size %}
            .blockSize = {{ format.block_size }},
            {% endif %}
            {% if format.block_extent %}
            .blockExtent = { {{- format.block_extent[0] }}, {{ format.block_extent[1] }}, {{ format.block_extent[2] -}} },
            {% endif %}
            {% if format.texels_per_block %}
            .texelsPerBlock = {{ format.texels_per_block }},
            {% endif %}
            {% if format.packed %}
            .packed = {{ format.packed }},
            {% endif %}
            {% if format.compression_type %}
            .compressionType = CompressionType::e{{ format.compression_cpp_type }},
            {% endif %}
            {% if format.planes %}
            .planes = {
                {% for plane in format.planes %}
                FormatPlane{
                    .compatibleFormat = {{ plane.compatible_cpp_format_name }},
                    .heightDivisor = {{ plane.height_divisor }},
                    .widthDivisor = {{ plane.width_divisor }},
                },
                {% endfor %}
            },
            {% endif %}
            {% if format.chroma_kind_cpp %}
            .chromaKind = ChromaKind::e{{ format.chroma_kind_cpp }},
            {% endif %}
        },
    },
    {% endfor %}
};

{% macro enumerate_formats(formats) %}

    {% set max_length = formats | map(attribute='format_cpp_name') | map('length') | max %}
    {% for format in formats %}
    {% set indent_comment = max_length - (format.format_cpp_name | length) %}
    {{ format.format_cpp_name }}, {{ ' ' * indent_comment }} // {{ format.format_name }}
    {% endfor %}
{% endmacro -%}

const std::unordered_set<vk::Format> kMultiplaneFormats = {
    {{- enumerate_formats(formats | selectattr('planes') | list) -}}
};

const std::unordered_set<vk::Format> kFormatHasSpvImageFormat = {
    {{- enumerate_formats(formats | selectattr('spirv_image_format') | list) -}}
};

const std::unordered_map<SpvImageFormat, vk::Format> kSpvImageFormatToVkFormat = {
    {% for format in formats | selectattr('spirv_image_format') %}
    {
        SpvImageFormat{{ format.spirv_image_format }},
        {{ format.format_cpp_name }},  // {{ format.format_name }}
    },
    {% endfor %}
};

vk::DeviceSize formatElementSize(vk::Format format, vk::ImageAspectFlagBits imageAspect)
{
    if (imageAspect == vk::ImageAspectFlagBits::eStencil) {
        return formatStencilBitSize(format) / 8;
    } else if (imageAspect == vk::ImageAspectFlagBits::eDepth) {
        return formatDepthBitSize(format) / 8;
    }
    auto f = kFormats.find(format);
    INVARIANT(f != std::end(kFormats), "Format '{}' is not known", format);
    if (!std::empty(f->second.planes)) {
        uint32_t planeIndex = getPlaneIndex(imageAspect);
        format = f->second.planes.at(planeIndex).compatibleFormat;
        f = kFormats.find(format);
        INVARIANT(f != std::end(kFormats), "Format '{}' is not known", format);
    }
    return f->second.blockSize;
}

}  // namespace codegen::vulkan
