#pragma once

#include <utils/assert.hpp>

#include <spirv/unified1/spirv.h>
#include <vulkan/vulkan.hpp>

#include <unordered_map>
#include <unordered_set>

#include <cstdint>

#include <codegen/vulkan_utils_export.h>

namespace codegen::vulkan
{

{%- macro cpp_enum_values(e) %}

    {% set max_length = e | map(attribute=1) | map('length') | max %}
    {% for c, cc in e %}
    {% set indent_comment = max_length - (cc | length) %}
    e{{ cc }}, {{ ' ' * indent_comment }} // {{ c }}
    {% endfor %}
{% endmacro %}

enum class FormatCompatibilityClass
{
    eUnknown, {{- cpp_enum_values(compatibility_classes) -}}
};

enum class ComponentType
{
    eAbsent,
    {% for component_type in component_types %}
    e{{ component_type }},
    {% endfor %}
};

enum class NumericFormat
{
    eUnknown, {{- cpp_enum_values(numeric_formats) -}}
};

enum class CompressionType
{
    eNotCompressed, {{- cpp_enum_values(compression_types) -}}
};

enum class ChromaKind
{
    eNoChroma, {{- cpp_enum_values(chroma_kinds) -}}
};

struct FormatComponent
{
    ComponentType componentType = ComponentType::eAbsent;
    NumericFormat numericFormat = NumericFormat::eUnknown;
    uint32_t bitsize = 0;  // 0 if compressed
    uint32_t planeIndex = 0;
};

struct FormatPlane
{
    vk::Format compatibleFormat = vk::Format::eUndefined;
    uint32_t heightDivisor = 1;
    uint32_t widthDivisor = 1;
};

struct Format
{
    FormatCompatibilityClass compatibilityClass = FormatCompatibilityClass::eUnknown;
    FormatComponent components[{{ max_component_count }}] = {};
    SpvImageFormat spvImageFormat = SpvImageFormatUnknown;
    uint32_t blockSize = 0;  // always non-zero
    vk::Extent3D blockExtent = {1, 1, 1};
    uint32_t texelsPerBlock = 1;
    uint32_t packed = 0;  // 8, 16, 32 or 0 if not packed
    CompressionType compressionType = CompressionType::eNotCompressed;
    FormatPlane planes[{{ max_plane_count }}] = {};
    ChromaKind chromaKind = ChromaKind::eNoChroma;

    size_t componentCount() const
    {
        size_t count = 0;
        for (const auto & component : components) {
            if (component.componentType == ComponentType::eAbsent) {
                break;
            }
            ++count;
        }
        return count;
    }

    size_t planeCount() const
    {
        size_t count = 0;
        for (const auto & plane : planes) {
            if (plane.compatibleFormat == vk::Format::eUndefined) {
                break;
            }
            ++count;
        }
        return count;
    }
};

extern const std::unordered_map<vk::Format, Format> kFormats VULKAN_UTILS_EXPORT;
extern const std::unordered_set<vk::Format> kMultiplaneFormats VULKAN_UTILS_EXPORT;
extern const std::unordered_set<vk::Format> kFormatHasSpvImageFormat VULKAN_UTILS_EXPORT;
extern const std::unordered_map<SpvImageFormat, vk::Format> kSpvImageFormatToVkFormat VULKAN_UTILS_EXPORT;

[[nodiscard]] vk::DeviceSize formatElementSize(vk::Format format, vk::ImageAspectFlagBits imageAspect) VULKAN_UTILS_EXPORT;

}  // namespace codegen::vulkan
